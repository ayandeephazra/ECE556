 /*
    ///////////////////////////////////////////////////
    //   initialization of nets struct within rst   //
    /////////////////////////////////////////////////
    if (phase == 4)
    {
      for (int i = 0; i < rst->numNets; i++)
      {
        rst->nets[i].id = i;
        if ((sscanf(buffer, "%s %s\n", token3, token4) > 0))
        {
          // printf("%s", token4);
          rst->nets[i].numPins = atoi(token4);
        }
        // declaring the points/pins in each net
        rst->nets[i].pins = (point *)malloc(rst->nets[i].numPins * sizeof(point));

        for (int j = 0; j < rst->nets[i].numPins; j++)
        {
          // printf("this%d", j);
          fgets(buffer, 200 * sizeof(char), file);


          if (sscanf(buffer, "%s %s\n", token5, token6) > 0)
          {
            rst->nets[i].pins[j].x = atoi(token5);
            rst->nets[i].pins[j].y = atoi(token6);
          }
        }
        // route malloc
        // will be assigned in solveRouting

        ////////////////////////////////////////////////////////////////
        //   Performs blockage parsing. Assuming that bad output      //
        //   is not a real scenario and so in that case, blockage     //
        //   statements parse the single integer in the following     //
        //   line after the last nets' pins. Uses that in a for loop  //
        //   to cycle through the five integer line input of the      //
        //   blockages and add to rst instance aptly.                 //
        ////////////////////////////////////////////////////////////////
      }
      phase = 5;
    }
    else
    {
      if (sscanf(buffer, "%s", token7) > 0)
      {
        num_blockages = atoi(token7);

        for (int k = 0; k < num_blockages; k++)
        {
          fgets(buffer, 200 * sizeof(char), file);

          if (sscanf(buffer, "%s", tokena) > 0)
          {
            one = atoi(tokena);
          }
          if (sscanf(buffer, "%s", tokenb) > 0)
          {
            two = atoi(tokenb);
          }
          if (sscanf(buffer, "%s", tokenc) > 0)
          {
            three = atoi(tokenc);
          }
          if (sscanf(buffer, "%s", tokend) > 0)
          {
            four = atoi(tokend);
          }
          if (sscanf(buffer, "%s", tokene) > 0)
          {
            five = atoi(tokene);
          }
        }
      }
    }
    */


        // O(n^2) bad

    /* sorted sorted_cost_array based on costs
    for (int i = 0; i < rst->numNets; i++)
    {
      for (int j = 0; j < rst->numNets; j++)
      {
        if (scd_[i].cost > cost_array[j])
        {
          scd_[i].cost = cost_array[j];
          scd_[i].edge_id = j;
        }
      }
    }
    */


    int computeEdgeWeights(routingInst *rst, edge_params *edge_params_)
{
  // edge_params *edge_params_ = (edge_params *)malloc(rst->numEdges * sizeof(edge_params));

  for (int edge_id = 0; edge_id < rst->numEdges; edge_id++)
  {
    if (rst->edgeUtils[edge_id] - rst->edgeCaps[edge_id] > 0)
    {
      edge_params_[edge_id].edgeOverflows = rst->edgeUtils[edge_id] - rst->edgeCaps[edge_id];
    }
    else
    {
      edge_params_[edge_id].edgeOverflows = 0;
    }
  }
  return 1;
}

edge utils
termination should just be time based?